par(ask=F)
par(mfrow=c(2,2))
plot(cars_model)
plot(fitted(cars_model, resid(cars_model)))
qqnorm(resid(cars_model))
qqline(resid(cars_model))
par(mfrow=c(2,2))
plot(cars_model)
par(ask=F)
par(mfrow=c(2,2))
plot(cars_model)
plot(fitted(cars_model, resid(cars_model)))
qqnorm(resid(cars_model))
qqline(resid(cars_model))
corr(cars)
cor(cars)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point() +
geom_smooth(method = "lm", color = "red") +
labs(title = "Impact of Car Speed on Car Stopping Distance",
x = "Speed (mph)",
y = "Stopping Distance (ft)") +
theme_minimal()
# Plot model residuals on y axis, fitted values on x axis
# Add red trend curve with better choice of smoothing bandwidth
qplot(y = cars_model$residuals, x = cars_model$fitted.values,
ylab = "Residuals", xlab = "Fitted values",
main = "The Do-it-yourself Residuals vs. Fitted plot") +
stat_smooth(method = "loess", span = 0.1, colour = I("red"), se = FALSE)
# Plot model residuals on y axis, fitted values on x axis
# Add red trend curve with better choice of smoothing bandwidth
qplot(y = cars_model$residuals, x = cars_model$fitted.values,
ylab = "Residuals", xlab = "Fitted values",
main = "The Do-it-yourself Residuals vs. Fitted plot") +
stat_smooth(method = "loess", span = 0.1, colour = I("red"), se = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot)
library(ggplot2)
library(dplyr)
test <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/test.csv')
train <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/train.csv')
head(test)
head(train)
library(ggplot2)
library(dplyr)
test <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/test.csv')
train <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/train.csv')
head(test)
head(train)
dim(test) & dim(train)
library(ggplot2)
library(dplyr)
test <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/test.csv')
train <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/train.csv')
head(test)
head(train)
dim(test) , dim(train)
library(ggplot2)
library(dplyr)
test <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/test.csv')
train <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/train.csv')
head(test)
head(train)
dim(test)
dim(train)
# Check for NA and missing values
# is.na return a vector with value TT for missing values.
numberOfNA = length(which(is.na(train)==T))
if(numberOfNA > 0) {
cat('Number of missing values found: ', numberOfNA)
cat('\nRemoving missing values...')
train = train[complete.cases(train), ]
}
# Check for NA and missing values
# is.na return a vector with value TT for missing values.
numberOfNA = length(which(is.na(train)==T))
if(numberOfNA > 0) {
cat('Number of missing values found: ', numberOfNA)
cat('\nRemoving missing values...')
train = train[complete.cases(train), ]
}
corr(train$x,train$y)
# Check for NA and missing values
# is.na return a vector with value TT for missing values.
numberOfNA = length(which(is.na(train)==T))
if(numberOfNA > 0) {
cat('Number of missing values found: ', numberOfNA)
cat('\nRemoving missing values...')
train = train[complete.cases(train), ]
}
cor(train$x,train$y)
dna_lm <- lm(x,y, data = train)
dna_lm <- lm(y~., data = train)
summary(dna_lm)
require(ResourceSelection)
kdepairs(cars)
dna_lm <- lm(y~., data = train)
summary(dna_lm)
require(ResourceSelection)
kdepairs(train)
dna_lm <- lm(y~., data = train)
summary(dna_lm)
par(ask=F)
par(mfrow=c(2,2))
plot(dna_lm)
hist(dna_lm$residuals)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
test <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/test.csv') train <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/train.csv')
library(ggplot2)
library(dplyr)
test <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/test.csv') train <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/train.csv')
library(ggplot2)
library(dplyr)
test <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/test.csv') train <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/train.csv'
library(ggplot2)
library(dplyr)
test <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/test.csv')
train <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/train.csv')
# Check for NA and missing values
# is.na return a vector with value TT for missing values.
numberOfNA = length(which(is.na(train)==T))
if(numberOfNA > 0) {
cat('Number of missing values found: ', numberOfNA)
cat('\nRemoving missing values...')
train = train[complete.cases(train), ]
}
cor(train$x,train$y)
require(ResourceSelection)
#summarize the data set
kdepairs(train)
#creating the model
dna_lm <- lm(y~., data = train) summary(dna_lm)
require(ResourceSelection)
#summarize the data set
kdepairs(train)
#creating the model
dna_lm <- lm(y~., data = train)
summary(dna_lm)
library(calculus)
install.packages("calculus")
library(calculus)
myf=function(x) 1/x
taylor(myf, var=c(x=1), order=6)
myf=function(x) 1/(1-x)
taylor(myf, var=c(x=1), order=6)
knitr::opts_chunk$set(echo = TRUE)
library(calculus)
myf=function(x) 1/(1-x)
taylor(myf, var=c(x=1), order=6)
myf=function(x) e^x
taylor(myf, var=c(x=1), order=6)
myf=function(x) exp(x)
taylor(myf, var=c(x=1), order=6)
myf=function(x) log1p(x)
taylor(myf, var=c(x=1), order=6)
myf=function(x) log1p(x)
taylor(myf, var=c(x=1), order=6)
myf=function(x) x^(1/2)
taylor(myf, var=c(x=1), order=6)
myf=function(x) x^(1/2)
taylor(myf, var=c(x=1), order=6)
myf=function(x) exp(x)
taylor(myf, var=c(x=0), order=6)
myf=function(x) sin(x)
taylor(myf, var=c(x=0), order=6)
knitr::opts_chunk$set(echo = TRUE)
myf=function(x) sin(x)
taylor(myf, var=c(x=0), order=6)
myf=function(x) tan(x)
taylor(myf, var=c(x=0), order=6)
setwd("~/CUNY/DATA 621 - Data Mining/Week 4/Data")
# load data money ball
money_ball_eval <- read.csv('moneyball-evaluation-data.csv')
money_ball_train <- read.csv('moneyball-training-data.csv')
money <- money_ball_train
install.packages('VIM')
library(VIM)
df <- kNN(money, variable = c('TEAM_BASERUN_SB','TEAM_BATTING_HBP','TEAM_FIELDING_DP'))
View(df)
library(data)
library(DataExplorer)
plot_histogram(df)
create_report(df)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
library(MASS)
library(rpart.plot)
library(ggplot2)
library(ggfortify)
library(gridExtra)
library(forecast)
library(fpp2)
library(fma)
library(kableExtra)
library(e1071)
library(mlbench)
library(ggcorrplot)
library(DataExplorer)
library(timeDate)
library(caret)
library(GGally)
library(corrplot)
library(RColorBrewer)
library(tibble)
library(tidyr)
library(tidyverse)
library(dplyr)
library(reshape2)
library(mixtools)
library(tidymodels)
library(ggpmisc)
library(ggpmisc)
library(ggpmisc)
install.packages("ggpmisc")
install.packages("ggpmisc")
install.packages("ggpmisc")
install.packages("ggpmisc")
install.packages("ggpmisc")
TRUE
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
library(ggpmisc)
create_correlation_table <- function(data, target_col) {
# Check if target_col is a character string
if (!is.character(target_col) || length(target_col) != 1) {
stop("target_col must be a single character string.")
}
# Ensure the target column exists in the data
if (!target_col %in% names(data)) {
stop("Target column not found in the dataframe.")
}
# Remove rows with missing values
data_complete <- data[complete.cases(data), ]
# Calculate the correlation matrix
cor_matrix <- cor(data_complete)
# Extract only the correlation values with the target variable
target_correlations <- cor_matrix[, target_col]
# Remove the target's self-correlation
target_correlations <- target_correlations[-which(names(target_correlations) == target_col)]
# Convert to a data frame for easy viewing
correlation_table <- data.frame(
Predictor = names(target_correlations),
Correlation = target_correlations
)
# Sort the table by absolute correlation values
correlation_table <- correlation_table[order(abs(correlation_table$Correlation), decreasing = TRUE), ]
return(correlation_table)
}
# Example usage
corr_tab <- create_correlation_table(money_ball_train, "TARGET_WINS")
# View the correlation table
print(corr_tab)
# Step 1: Remove rows with missing values
data_complete <- money_ball_train[complete.cases(money_ball_train), ]
# Step 2: Initialize a results data frame
results <- data.frame(Predictor = character(), Correlation = numeric(), PValue = numeric(), stringsAsFactors = FALSE)
# Step 3: Loop through each predictor variable
for (predictor in names(data_complete)[names(data_complete) != "TARGET_WINS"]) {
# Perform the correlation test
test_result <- cor.test(data_complete[[predictor]], data_complete$TARGET_WINS)
# Store the results
results <- rbind(results, data.frame(Predictor = predictor,
Correlation = test_result$estimate,
PValue = test_result$p.value))
}
# Step 4: View the results
print(results)
calculate_correlations_with_pvalues <- function(data, target_col) {
# Check if target_col is a character string
if (!is.character(target_col) || length(target_col) != 1) {
stop("target_col must be a single character string.")
}
# Ensure the target column exists in the data
if (!target_col %in% names(data)) {
stop("Target column not found in the dataframe.")
}
# Remove rows with missing values
data_complete <- data[complete.cases(data), ]
# Initialize a results data frame
results <- data.frame(Predictor = character(), Correlation = numeric(), PValue = numeric(), stringsAsFactors = FALSE)
# Loop through each predictor variable
for (predictor in names(data_complete)[names(data_complete) != target_col]) {
# Perform the correlation test
test_result <- cor.test(data_complete[[predictor]], data_complete[[target_col]])
# Store the results
results <- rbind(results, data.frame(Predictor = predictor,
Correlation = test_result$estimate,
PValue = test_result$p.value))
}
return(results)
}
# Example usage
correlation_results <- calculate_correlations_with_pvalues(money_ball_train, "TARGET_WINS")
# View the results
print(correlation_results)
# View the results
print(round(correlation_results,digits = 5))
# View the results
print(round(correlation_results,digits = 10))
calculate_correlations_with_pvalues <- function(data, target_col, round_digits = 3) {
# Check if target_col is a character string
if (!is.character(target_col) || length(target_col) != 1) {
stop("target_col must be a single character string.")
}
# Ensure the target column exists in the data
if (!target_col %in% names(data)) {
stop("Target column not found in the dataframe.")
}
# Remove rows with missing values
data_complete <- data[complete.cases(data), ]
# Initialize a results data frame
results <- data.frame(Predictor = character(), Correlation = numeric(), PValue = numeric(), stringsAsFactors = FALSE)
# Loop through each predictor variable
for (predictor in names(data_complete)[names(data_complete) != target_col]) {
# Perform the correlation test
test_result <- cor.test(data_complete[[predictor]], data_complete[[target_col]])
# Store the rounded results
results <- rbind(results, data.frame(Predictor = predictor,
Correlation = round(test_result$estimate, round_digits),
PValue = round(test_result$p.value, round_digits)))
}
return(results)
}
# Example usage
correlation_results <- calculate_correlations_with_pvalues(money_ball_train, "TARGET_WINS")
# View the results
print(round(correlation_results,digits = 10))
# View the results
print(correlation_results)
calculate_correlations_with_pvalues <- function(data, target_col) {
# Check if target_col is a character string
if (!is.character(target_col) || length(target_col) != 1) {
stop("target_col must be a single character string.")
}
# Ensure the target column exists in the data
if (!target_col %in% names(data)) {
stop("Target column not found in the dataframe.")
}
# Remove rows with missing values
data_complete <- data[complete.cases(data), ]
# Initialize a results data frame
results <- data.frame(Predictor = character(), Correlation = numeric(), PValue = numeric(), stringsAsFactors = FALSE)
# Loop through each predictor variable
for (predictor in names(data_complete)[names(data_complete) != target_col]) {
# Perform the correlation test
test_result <- cor.test(data_complete[[predictor]], data_complete[[target_col]])
# Store the rounded results to 10 decimal places
results <- rbind(results, data.frame(Predictor = predictor,
Correlation = round(test_result$estimate, 10),
PValue = round(test_result$p.value, 10)))
}
return(results)
}
# Example usage
correlation_results <- calculate_correlations_with_pvalues(money_ball_train, "TARGET_WINS")
# View the results
print(correlation_results)
money_ball$sqrt_column_name <- sqrt(money_ball$column_name)
# Apply square root transformation to all columns
money_ball_transformed <- as.data.frame(apply(money_ball, 2, sqrt))
# Apply square root transformation to all columns
money_ball_transformed <- as.data.frame(apply(money_ball_train, 2, sqrt))
# Rename columns
colnames(money_ball_transformed) <- paste0("sqrt_", colnames(money_ball))
# Rename columns
colnames(money_ball_transformed) <- paste0("sqrt_", colnames(money_ball_train))
# View the modified data frame
print(money_ball_transformed)
# Example usage
correlation_results <- calculate_correlations_with_pvalues(money_ball_transformed, "TARGET_WINS")
# Example usage
correlation_results <- calculate_correlations_with_pvalues(money_ball_transformed, "sqrt_TARGET_WINS")
# Example usage
correlation_results <- calculate_correlations_with_pvalues(money_ball_transformed, "sqrt_TARGET_WINS")
# Example usage
correlation_results <- calculate_correlations_with_pvalues(money_ball_transformed, "sqrt_TARGET_WINS")
# Correlation Plot
cor_matrix <- cor(money_ball_transformed, use = 'complete.obs')
corrplot(cor_matrix, method = 'circle')
library(corrplot)
corrplot(cor_matrix, method = 'circle')
set.seed(123)
model <- lm(TARGET_WINS ~ ., data = money_ball_train)
library(MASS)
# Determine optimal lambda value
boxcox_result <- boxcox(model)
# Extract optimal lambda
optimal_lambda <- boxcox_result$x[which.max(boxcox_result$y)]
print(optimal_lambda)
$
#Transform the data using the optimal lambda
data$boxcox_transformed <- ifelse(optimal_lambda == 0,
log(data$values),
(data$values^optimal_lambda - 1) / optimal_lambda)
#Transform the data using the optimal lambda
data$boxcox_transformed <- ifelse(optimal_lambda == 0,log(data$values),
(data$values^optimal_lambda - 1) / optimal_lambda)
# Determine optimal lambda value
boxcox_result <- boxcox(model)
# Extract optimal lambda
optimal_lambda <- boxcox_result$x[which.max(boxcox_result$y)]
print(optimal_lambda)
# Transform the data using the optimal lambda
data$boxcox_transformed <- ifelse(optimal_lambda == 0,
log(data$values),
(data$values^optimal_lambda - 1) / optimal_lambda)
# Transform the data using the optimal lambda
data$boxcox_transformed <- ifelse(optimal_lambda == 0,
log(money_ball_train$values),
(money_ball_train$values^optimal_lambda - 1) / optimal_lambda)
# Transform the data using the optimal lambda
money_ball_train$boxcox_transformed <- ifelse(optimal_lambda == 0,
log(money_ball_train$values),
(money_ball_train$values^optimal_lambda - 1) / optimal_lambda)
money_ball_train
ifelse(optimal_lambda == 0,
log(money_ball_train$values),
(money_ball_train$values^optimal_lambda - 1) / optimal_lambda)
# Transform the data using the optimal lambda
money_ball_train$boxcox_transformed <- ifelse(optimal_lambda == 0,
log(money_ball_train$TARGET_WINS),
(money_ball_train$TARGET_WINS^optimal_lambda - 1) / optimal_lambda)
money_ball_train
model <- lm(TARGET_WINS ~ 1., data = money_ball_train)
library(MASS)
# Determine optimal lambda value
boxcox_result <- boxcox(model)
# Extract optimal lambda
optimal_lambda <- boxcox_result$x[which.max(boxcox_result$y)]
print(optimal_lambda)
# Correlation Plot
cor_matrix <- cor(money_ball_train, use = 'complete.obs')
corrplot(cor_matrix, method = 'circle')
# Determine optimal lambda value
boxcox_result <- boxcox(model)
# Extract optimal lambda
optimal_lambda <- boxcox_result$x[which.max(boxcox_result$y)]
print(optimal_lambda)
# Transform the data using the optimal lambda
money_ball_train$boxcox_transformed <- ifelse(optimal_lambda == 0,
log(money_ball_train$TARGET_WINS),
(money_ball_train$TARGET_WINS^optimal_lambda - 1) / optimal_lambda)
money_ball_train
# Correlation Plot
cor_matrix <- cor(money_ball_train, use = 'complete.obs')
corrplot(cor_matrix, method = 'circle')
# Correlation Plot
cor_matrix <- cor(money_ball_train, use = 'complete.obs')
corrplot(cor_matrix, method = 'circle')
library(alias)
install.packages('alias')
library(alias)
# Get the structure of the dataset
str(moneyball_train)
# Get the structure of the dataset
str(money_ball_train)
# Get basic statistics (mean, median, standard deviation)
summary(money_ball_train)
moneyball_train <- money_ball_train
# Calculate statistics
mean_values <- colMeans(moneyball_train, na.rm = TRUE)
median_values <- apply(moneyball_train, 2, median, na.rm = TRUE)
std_dev_values <- apply(moneyball_train, 2, sd, na.rm = TRUE)
# Print summary statistics
print(mean_values)
print(median_values)
print(std_dev_values)
library(ggplot2)
# Example for one variable, replace 'variable_name' with actual variable name
ggplot(moneyball_train, aes(x = variable_name)) +
geom_bar() +
labs(title = "Bar Chart of Variable")
# Example for one variable, replace 'variable_name' with actual variable name
ggplot(moneyball_train, aes(x = TARGET_WINS)) +
geom_bar() +
labs(title = "Bar Chart of Variable")
# Correlation with target variable
cor_matrix <- cor(moneyball_train, use = "complete.obs")
print(cor_matrix)
# Check for missing values
missing_values <- colSums(is.na(moneyball_train))
print(missing_values)
# Create missing data flags
moneyball_train$missing_flag <- ifelse(is.na(moneyball_train$some_variable), 1, 0)
# Create missing data flags
moneyball_train$missing_flag <- ifelse(is.na(moneyball_train$some_variable), 1, 0)
# Create missing data flags
moneyball_train$missing_flag <- ifelse(is.na(moneyball_train$TEAM_BATTING_HBP), 1, 0)
# Log transform
moneyball_train$TEAM_BATTING_HBP <- log(moneyball_train$TEAM_BATTING_HBP + 1)
# Log transform
moneyball_train$TEAM_BATTING_HBP <- log(moneyball_train$TEAM_BATTING_HBP + 1)
model22 <- lm(TARGET_WINS ~ TEAM_BATTING_H + var2 + TEAM_BATTING_HBP, data = moneyball_train)
model22 <- lm(TARGET_WINS ~ TEAM_BATTING_H + TEAM_BATTING_3B + TEAM_BATTING_HBP, data = moneyball_train)
summary(model1)
summary(model22)
model22 <- lm(TARGET_WINS ~ log(TEAM_BATTING_H) + TEAM_BATTING_3B + TEAM_BATTING_HBP, data = moneyball_train)
summary(model22)
model22 <- lm(TARGET_WINS ~ log(TEAM_BATTING_H * TEAM_BATTING_3B + TEAM_BATTING_HBP, data = moneyball_train)
model22 <- lm(TARGET_WINS ~ log(TEAM_BATTING_H * TEAM_BATTING_3B) + TEAM_BATTING_HBP, data = moneyball_train)
model22 <- lm(TARGET_WINS ~ log(TEAM_BATTING_H * TEAM_BATTING_3B) + TEAM_BATTING_HBP, data = moneyball_train)
summary(model22)
model22 <- lm(TARGET_WINS ~ log(TEAM_BATTING_H) * TEAM_BATTING_3B + TEAM_BATTING_HBP, data = moneyball_train)
summary(model22)
# Model 1 evaluation
mse1 <- mean(model22$residuals^2)
r_squared1 <- summary(model22)$r.squared
f_stat1 <- summary(model22)$fstatistic[1]
print(paste("MSE:", mse1, "R-squared:", r_squared1, "F-statistic:", f_stat1))
predictions <- predict(model22, newdata = moneyball_eval)
predictions <- predict(model22, newdata = money_ball_eval)
print(predictions)
